/******************************************************************************
 * FILENAME: mem.c
 * AUTHOR:   procek@wisc.edu <Peter Procek>, gnygard@wisc.edu <Graham Nygard>
 * DATE:     15 March 2015
 * PROVIDES: Contains a set of library functions for memory 
 * *****************************************************************************/

#include "mymem.h"
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <string.h>

//create variable holder for slabSize request
static int g_slabSize;

//variable to hold padded allocation size
//global to do arithmetic for slab allocator location
static int alloc_size;

//flag to signal if we are to use slab allocation
//states:
//0 - slab not requested
//1 - slab requested
//2 - slab failed
//*global declaration for optional thread optimizing*
static int slab_fl = 0;

//top of slab list & NF REGION
void * slab_head = NULL;
void * nf_head = NULL;

//Headers for freelist for each region
FreeHeader * slab_head_l = NULL;
FreeHeader * nf_head_l = NULL;

//last accessible address possible (SEG_FAULT_CHECK)
void * EOL = NULL;

/* Function used to Initialize the memory allocator */
/* Not intended to be called more than once by a program */
/* Argument - sizeOfRegion: Specifies the size of the chunk which needs to be allocated */
/* Returns 0 on success and -1 on failure */
void * Mem_Init(int sizeOfRegion, int slabSize)
{
  int pagesize;
  int padding;
  void* space_ptr;

  //invoke static to retain value b/t invokations
  static int allocated_once = 0;
  
  //if this method invoked more than once or if request innapropriate size
  //then error
  if(0 != allocated_once || sizeOfRegion <= 0)
  {
    return NULL;
  }

  //save the special slabSize
  g_slabSize = slabSize;

  /*create padding in requested memory as to provide natural alignment
  /-->natural alignment incase user reqests memory not a multiple of pagesize*/

  //Get pagesize (portable)
  pagesize = sysconf(_SC_PAGESIZE);

  // pad user requested memory to be multiple of page size
  padding = sizeOfRegion % pagesize;
  padding = (pagesize - padding) % pagesize;
  alloc_size = sizeOfRegion + padding;

  // use mmap to allocate memory 
  // **non backed memory region
  space_ptr = mmap(NULL, alloc_size, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
  if (MAP_FAILED == space_ptr)
  {
    //mapped memory allocation failed
    return NULL;
  }
  
  //flag that we mapped to memory once now
  allocated_once = 1;

  /*CREATE ALL MARKERS AND POINTERS TO CRITICAL SECTIONS*/
  //mark begining of each allocation type region
  slab_head = space_ptr;
  nf_head = space_ptr;

  //return begining of the large free block, which will
  //also serve as the begining of the slab block
  slab_head_l = (FreeHeader *)space_ptr;
  //only block in free list
  slab_head_l->next = NULL;
  //*SIZE STORED IN BLOCK EXCLUDES HEADER SPACE
  slab_head_l->length = (alloc_size/4) - (int)sizeof(FreeHeader);

  //first 25% of memory dedicated to slab
  //so list for next_fit allocation comes next
  nf_head_l = (FreeHeader *)(space_ptr + (alloc_size/4));
  nf_head_l->next = NULL;
  nf_head_l->length = ((3*alloc_size)/4) - (int)sizeof(FreeHeader);

  //mark end of list (final addressable memory slot)
  EOL = space_ptr + (alloc_size - 1);
  
  //return the addr of the entire piece of memory
  return space_ptr;
}

/*function is in charge of doling out memory.*/ 
/*provides ptr to the requested chunk of memory.*/
/*returns ptr to adr of requested block on success.*/
/*returns Null ptr on failure*/
void * Mem_Alloc(int size){

	int padding;
	int alloc_size;
	int req_size = size;
	
	//sanity check request size
	if(req_size < 0)
	{
		return NULL;
	}

	//check if the user requested a slab
	if(req_size == g_slabSize)
	{
		//slab requested, attempt slab allocation
		if(slab_alloc(&slab_fl) == NULL)
		{
			//error
			return NULL;
		}
	}

	//if the user requested a next fit piece of
	//memory, make it 16-byte aligned
	if(slab_fl == 0)
	{
		padding = req_size % 16;
		padding = (16 - padding) % 16;
		alloc_size = req_size + padding;
	}	

	//attempt next fit allocation if either user passed
	//in non slab request size, or slab allocation failed
	if(slab_fl == 0)
	{
		if(nf_alloc(alloc_size) == NULL)
		{
			//not enough contiguous space
			return NULL;
		}
	}
	else
	if(slab_fl == 2)
	{
		if(nf_alloc(req_size) == NULL)
		{
			//not enough contiguous space
			return NULL;
		}
	}
		
}

static void * slab_alloc(void * head, int * fl){

}

static void * nf_alloc(void * head, int size){

}



