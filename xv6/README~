
Name: Peter Procek
CSL-ID: procek
Name: Graham Nygard 
CSL-ID:  nygard

Implementation Details:

Kernel modifications have been implemented to integrate two new system calls: getpinfo and settickets. Getpinfo is in charge of getting information about the processes in the ptable by passing in a user created pointer to allocated memory for 64 structs to contain process statistics. User passes in a pointer, and on the kernel level, a void pointer is passed through to the function in sysproc.c, which calls an auxillary function (fill_pstat) in proc.c (linked through def.h) to update all this information by casting the void pointer to a pstat struct pointer and iterating through the ptable and filling appropriate information. Settickets takes in a user passed in integer cast as a long value. First a check is made to make sure the passed in value does not exceed boundary limits and is a multiple of ten. The processes stride value is set to LCM of the set of all integer multiples of 10 between 10 and 150, divided by the ticket value. To avoid any more type casting and overflow cases, long integers are used as the parameter for stride, pass, n_schedule, and ticket amount. LCM is set to (2^31)-1. On kernel side, the scheduler has been replaced with a stride scheduler. Scheduler calls an auxillary function created named get_lproc which finds the process that is runnable with the smallest pass value. This process is run. Then a check is made to make sure the pass value plus stride does not cause an overflow. If not, pass += stride. A context switch happens then the n_schedule is incrmented. Both allocprocs and wakeup1 have been modified as well. Allocproc has been modified to initiate the stride and pass value. Stride is set to default 10 tickets. Pass value is set by iterating through the process table and finding the lowest pass value. The incoming process obtains this lowest pass value. Wakeup1 has a similar modification with the pass value. Upon wake up, to avoid starvation, we also iterate through the ptable and find the smallest pass value. This value is the woken up process's new pass value. By doing these modifications, we ensure fairness without starving processes. Defs.h was also modified to include all new auxillary function definitions as well as include static constant definitions to be used for the Mintickets, maxtickets, and LCM. 
		
