#include "types.h"
#include "x86.h"
#include "defs.h"
#include "param.h"
#include "mmu.h"
#include "proc.h"
#include "sysfunc.h"

int
sys_fork(void)
{
  return fork();
}

int
sys_exit(void)
{
  exit();
  return 0;  // not reached
}

int
sys_wait(void)
{
  return wait();
}

int
sys_kill(void)
{
  int pid;

  if(argint(0, &pid) < 0)
    return -1;
  return kill(pid);
}

int
sys_getpid(void)
{
  return proc->pid;
}

//this function deals with the heap
int
sys_sbrk(void)
{
  int addr;
  int n;
  int rounded_n;
  int rounded_h;

  if(argint(0, &n) < 0)
    return -1;
  addr = proc->sz;//should be fine cause we stored sz immediately after code region so it should still behave properly

  /********PART B MOD.7********************************************************/
  /*premptively check if extending the heap will intersect the unallocated buffer we're*/
  /*supposed to keep before the stack. Aka, check that heap top + n >= stack_top - pgsize */
  rounded_n = PGROUNDUP(n);
  rounded_h = PGROUNDUP(proc->sz);
  if( (addr+n) >= (proc->stack_top - PGSIZE))
  {
    //seg fault
    //dont allocate the heap space. I'm assuming the crash will happen automatically.
    return addr;
  }
  /****************************************************************************/
  
  if(growproc(n) < 0)
    return -1;
  //returns starting address of newly allocated memory
  return addr;
}

int
sys_sleep(void)
{
  int n;
  uint ticks0;
  
  if(argint(0, &n) < 0)
    return -1;
  acquire(&tickslock);
  ticks0 = ticks;
  while(ticks - ticks0 < n){
    if(proc->killed){
      release(&tickslock);
      return -1;
    }
    sleep(&ticks, &tickslock);
  }
  release(&tickslock);
  return 0;
}

// return how many clock tick interrupts have occurred
// since boot.
int
sys_uptime(void)
{
  uint xticks;
  
  acquire(&tickslock);
  xticks = ticks;
  release(&tickslock);
  return xticks;
}
